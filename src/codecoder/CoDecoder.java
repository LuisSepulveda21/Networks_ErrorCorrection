package codecoder;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class CoDecoder extends javax.swing.JFrame {

    File arch = new File("");

    public CoDecoder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        CorrecionFrame = new javax.swing.JFrame();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        InButtonC = new javax.swing.JButton();
        RutaC = new javax.swing.JTextField();
        InButton = new javax.swing.JButton();
        Ruta = new javax.swing.JTextField();
        SalidaText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        CorrecionFrame.setMinimumSize(new java.awt.Dimension(396, 276));

        jButton3.setText("ENVIO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("RECEPCION");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        InButtonC.setText("Abrir");
        InButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InButtonCActionPerformed(evt);
            }
        });

        RutaC.setEnabled(false);

        javax.swing.GroupLayout CorrecionFrameLayout = new javax.swing.GroupLayout(CorrecionFrame.getContentPane());
        CorrecionFrame.getContentPane().setLayout(CorrecionFrameLayout);
        CorrecionFrameLayout.setHorizontalGroup(
            CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorrecionFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(222, Short.MAX_VALUE))
            .addGroup(CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CorrecionFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(RutaC)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(InButtonC)
                    .addContainerGap()))
        );
        CorrecionFrameLayout.setVerticalGroup(
            CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorrecionFrameLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jButton3)
                .addGap(60, 60, 60)
                .addComponent(jButton4)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(CorrecionFrameLayout.createSequentialGroup()
                    .addGap(125, 125, 125)
                    .addGroup(CorrecionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InButtonC)
                        .addComponent(RutaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(126, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InButton.setText("Abrir");
        InButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InButtonActionPerformed(evt);
            }
        });

        Ruta.setEnabled(false);

        jLabel1.setText("Nombre Archivo de Salida:");

        jButton1.setText("Deteccion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Correccion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Ruta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SalidaText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(149, 149, 149)
                                .addComponent(jButton2)))
                        .addGap(0, 148, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InButton)
                    .addComponent(Ruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addGap(70, 70, 70)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SalidaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    ArrayList palabras = new ArrayList<>();
    ArrayList palabrasn = new ArrayList<>();

    private void InButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InButtonActionPerformed
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos .txt", "txt");
        fc.setFileFilter(filtro);
        int opcion = fc.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            arch = fc.getSelectedFile();
            Ruta.setText(arch.getAbsolutePath());
            try (Scanner leer = new Scanner(arch)) {
                while (leer.hasNextLine()) {
                    String linea = leer.nextLine();
                    //linebreak
                    linea=linea+"°";
                    palabras.add(linea);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CoDecoder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_InButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        ArrayList bits = new ArrayList<>();

        for (int i = 0; i < palabras.size(); i++) {

            for (int j = 0; j < palabras.get(i).toString().length(); j++) {
                
                
                String bit_rep;
                if (palabras.get(i).toString().charAt(j)=='°') {
                    bit_rep = "00001010";
                }else{
                bit_rep = Integer.toBinaryString((int) palabras.get(i).toString().charAt(j));
                }

                while (bit_rep.length() < 8) {
                    bit_rep = ("0" + bit_rep);
                }

                bit_rep = creacion(bit_rep);

                bits.add(bit_rep);
            }

        }

        //obtencion de la ruta
        String file_name = Ruta.getText().substring(Ruta.getText().lastIndexOf("/") + 1);
        file_name = file_name.substring(0, file_name.lastIndexOf(".")) + ".ham";

        //creacion del archivo .ham
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(file_name), "utf-8"))) {
            for (int i = 0; i < bits.size(); i++) {
                writer.write(bits.get(i).toString());
                writer.write(System.getProperty("line.separator"));
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        CorrecionFrame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void InButtonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InButtonCActionPerformed
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos .ham", "ham");
        fc.setFileFilter(filtro);
        int opcion = fc.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            arch = fc.getSelectedFile();
            RutaC.setText(arch.getAbsolutePath());
            try (Scanner leer = new Scanner(arch)) {
                while (leer.hasNextLine()) {
                    String linea = leer.nextLine();
                    palabrasn.add(linea);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CoDecoder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_InButtonCActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        ArrayList bits_corregidos = new ArrayList<>();
        ArrayList datawords = new ArrayList<>();
        

        for (int i = 0; i < palabrasn.size(); i++) {
            bits_corregidos.add(correccion(palabrasn.get(i).toString()));

        }

        //obtencion de los dw
        String dataword="";
        for (int i = 0; i < bits_corregidos.size(); i++) {

            String dw = bits_corregidos.get(i).toString();
            dataword = "";

            for (int j = 1; j <= dw.length(); j++) {

                if ((Integer.parseInt(Integer.toBinaryString(j))
                        & Integer.parseInt(Integer.toBinaryString(j - 1))) != 0 && j != 8) {

                    dataword = dw.charAt(dw.length() - j) + dataword;

                }

            }

            datawords.add(dataword);
        }


        //obtencion de la ruta para codewords corredigos
        String file_name = RutaC.getText().substring(RutaC.getText().lastIndexOf("/") + 1);
        file_name = file_name.substring(0, file_name.lastIndexOf(".")) + "_salida.ham";

        //obtencion de la ruta para dw/texto
        String file_name2;
        if (!"".equals(SalidaText.getText())) {
            file_name2 = SalidaText.getText()+".txt";
        } else {
            file_name2 = "salida.txt";
        }

        //creacion del archivo .ham de cw corregidos
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(file_name), "utf-8"))) {
            for (int i = 0; i < bits_corregidos.size(); i++) {
                writer.write(bits_corregidos.get(i).toString());
                writer.write(System.getProperty("line.separator"));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //creacion del archivo de texto
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(file_name2), "utf-8"))) {
            for (int i = 0; i < datawords.size(); i++) {
                if (datawords.get(i).toString().equals("00001010")) {
                    writer.write(System.getProperty("line.separator"));
                }else{
                int charCode = Integer.parseInt(datawords.get(i).toString(), 2);
                writer.write(new Character((char) charCode).toString());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    public static String correccion(String bits) {
        ArrayList pos_bits_paridad = new ArrayList<>();

        int longitud = bits.length();

        //comprobar si es potencia de 2:
        boolean comp = true;
        while (comp) {
            if ((Integer.parseInt(Integer.toBinaryString(longitud))
                    & Integer.parseInt(Integer.toBinaryString(longitud - 1))) == 0 || longitud == 8) {
                comp = false;
            } else {
                longitud -= 1;
            }
        }

        //arraylist resultado
        ArrayList bitresult = new ArrayList<>();

        while (longitud > 0) {
            pos_bits_paridad.add(longitud);
            bitresult.add(bits.charAt(bits.length() - longitud));
            longitud /= 2;
        }

        for (int i = 1; i <= bits.length(); i++) {
            if ((Integer.parseInt(Integer.toBinaryString(i))
                    & Integer.parseInt(Integer.toBinaryString(i - 1))) != 0 && i != 8) {

                ArrayList fact_pot_2 = bitsSet(i);

                for (int j = 0; j < pos_bits_paridad.size(); j++) {

                    for (int k = 0; k < fact_pot_2.size(); k++) {

                        if ((int) fact_pot_2.get(k) == (int) pos_bits_paridad.get(j)) {

                            int b1_entero = Integer.parseInt(String.valueOf(bitresult.get(j)));

                            int b1 = Integer.parseInt(Integer.toBinaryString(b1_entero));
                            int b2 = Integer.parseInt(String.valueOf(bits.charAt(bits.length() - i)));

                            int res = (b1 ^ b2);
                            bitresult.set(j, res);

                        }

                    }

                }

            }
        }

        String result = "";

        for (int i = 0; i < bitresult.size(); i++) {
            result += bitresult.get(i).toString();
        }
        

        int bitdañado = Integer.parseInt(result, 2);
        System.out.println("bit dañado = "+bitdañado);

        if (bitdañado != 0) {
            char[] charArray = bits.toCharArray();
            

            if (bits.charAt(bits.length() - bitdañado) == '1') {

                charArray[bits.length() - bitdañado] = '0';

            } else {

                charArray[bits.length() - bitdañado] = '1';

            }

            bits = new String(charArray);
        }

        return bits;
    }

    public static String creacion(String bits) {

        ArrayList pos_bits_paridad = new ArrayList<>();
        int longitud = bits.length();

        //comprobar si es potencia de 2:
        boolean comp = true;
        while (comp) {

            if (((Integer.parseInt(Integer.toBinaryString(longitud))
                    & Integer.parseInt((Integer.toBinaryString(longitud - 1)))) == 0) || longitud == 8) {
                comp = false;
            } else {
                longitud += 1;
            }
        }

        //arraylist resultado
        ArrayList bitresult = new ArrayList<>();

        while (longitud > 0) {
            bitresult.add("_");
            pos_bits_paridad.add(longitud);
            longitud /= 2;
        }

        //crear codeword incompleta
        String r_codeword = "";

        int cont = 0;

        for (int i = 0; i < bits.length() + bitresult.size(); i++) {

            if (i == 4 || i == 8 || i == 10 || i == 11) {
                r_codeword += "_";
            } else {
                r_codeword += bits.charAt(cont);
                cont++;
            }

        }

        bits = r_codeword;

        for (int i = 1; i <= bits.length(); i++) {

            //verificar que no sea pot de 2
            if ((Integer.parseInt(Integer.toBinaryString(i))
                    & Integer.parseInt(Integer.toBinaryString(i - 1))) != 0 && i != 8) {

                ArrayList fact_pot_2 = bitsSet(i);

                for (int j = 0; j < pos_bits_paridad.size(); j++) {

                    for (int k = 0; k < fact_pot_2.size(); k++) {

                        if ((int) fact_pot_2.get(k) == (int) pos_bits_paridad.get(j)) {

                            int b1_entero;
                            int res = 0;

                            if (!"_".equals(bitresult.get(j).toString())) {
                                b1_entero = Integer.parseInt(String.valueOf(bitresult.get(j)));

                                int b1 = Integer.parseInt(Integer.toBinaryString(b1_entero));
                                int b2 = Integer.parseInt(String.valueOf(bits.charAt(bits.length() - i)));

                                res = (b1 ^ b2);
                            } else {

                                res = Integer.parseInt(String.valueOf(bits.charAt(bits.length() - i)));

                            }

                            bitresult.set(j, res);

                        }

                    }

                }

            }
        }

        cont = 0;

        char[] charArray = bits.toCharArray();

        for (int i = 0; i < bits.length(); i++) {

            if (bits.charAt(i) == '_') {
                charArray[i] = bitresult.get(cont).toString().charAt(0);
                cont++;
            }

        }

        bits = new String(charArray);

        return bits;
    }

    public static ArrayList bitsSet(long num) {

        ArrayList factorizacion = new ArrayList<>();

        BitSet bitSet = new BitSet();
        for (int i = 0; i < 64; i++) {
            if (((num >>> i) & 1) != 0) {
                bitSet.set(i);
            }
        }

        String sumpow2 = bitSet.toString();

        for (int k = 1; k < sumpow2.length(); k += 3) {

            int potencia = Character.getNumericValue(sumpow2.charAt(k));

            factorizacion.add((int) Math.pow(2, potencia));

        }
        return factorizacion;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoDecoder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoDecoder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoDecoder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoDecoder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoDecoder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame CorrecionFrame;
    private javax.swing.JButton InButton;
    private javax.swing.JButton InButtonC;
    private javax.swing.JTextField Ruta;
    private javax.swing.JTextField RutaC;
    private javax.swing.JTextField SalidaText;
    private javax.swing.JFileChooser fc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
